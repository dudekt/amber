@import "./palette";

%after,
%before {
    content: " ";
    display: block;
}

$palettes: (
    $palette,
);

@function reduce($list, $callback, $initial: 0) {
    $result: $initial;
    @if length($list) > 0 {
        @for $i from 1 through length($list) {
            $result: call($callback, $result, nth($list, $i));
        }
    }
    @return $result;
}

@function applyTransformation($value, $functionWithArgument){
    @if length($functionWithArgument) == 1 {
        @return call(nth($functionWithArgument, 1), $value);
    } @elseif length($functionWithArgument) == 2 {
        @return call(nth($functionWithArgument, 1), $value, nth($functionWithArgument, 2));
    } @elseif length($functionWithArgument) == 3 {
        @return call(nth($functionWithArgument, 1), $value, nth($functionWithArgument, 2), nth($functionWithArgument, 3));
    } @elseif length($functionWithArgument) == 4 {
        @return call(nth($functionWithArgument, 1), $value, nth($functionWithArgument, 2), nth($functionWithArgument, 3), nth($functionWithArgument, 4));
    }
}

@function applyTransformations($value, $transformations){

    @if length($transformations) > 0 {
        @if type-of(nth($transformations,1)) == string {
            @return applyTransformation($value, $transformations)
        }

        @return reduce($transformations, applyTransformation, $value);
    }

    @return $value;
}

@mixin get-colors($param, $type, $elem, $transformations: ()) {
    @each $palette in $palettes {
        @if map-get($palette, $type) {
            $value: map-get(map-get($palette, $type), $elem);
            $paletteName: map-get($palette, name);
            @if $paletteName == default {
                @if $value {
                    & {
                        #{$param}: applyTransformations($value, $transformations);
                    }
                }
            } @else {

                @if $value {
                    :global(body.#{$paletteName}) & {
                        #{$param}: applyTransformations($value, $transformations);
                    }

                    body.#{$paletteName} & {
                        #{$param}: applyTransformations($value, $transformations);
                    }
                }
            }
        }
    }
}

